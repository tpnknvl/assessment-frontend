{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","assessment-frontend/tests/app.lint-test.js","assessment-frontend/tests/helpers/destroy-app.js","assessment-frontend/tests/helpers/module-for-acceptance.js","assessment-frontend/tests/helpers/start-app.js","assessment-frontend/tests/integration/pods/components/data-grid/component-test.js","assessment-frontend/tests/integration/pods/components/header-navigation/component-test.js","assessment-frontend/tests/integration/pods/components/info-button/component-test.js","assessment-frontend/tests/integration/pods/components/publisher-detail/component-test.js","assessment-frontend/tests/test-helper.js","assessment-frontend/tests/tests.lint-test.js","assessment-frontend/tests/unit/pods/product/adapter-test.js","assessment-frontend/tests/unit/pods/product/model-test.js","assessment-frontend/tests/unit/pods/product/route-test.js","assessment-frontend/tests/unit/pods/products/route-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('assessment-frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('baseRoute.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'baseRoute.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/fixtures/sample-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/fixtures/sample-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/components/data-grid/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/data-grid/component.js should pass ESLint\\n\\n7:5 - Unexpected console statement. (no-console)\\n9:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('pods/components/header-navigation/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/header-navigation/component.js should pass ESLint\\n\\n6:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('pods/components/info-button/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/info-button/component.js should pass ESLint\\n\\n6:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('pods/components/publisher-detail/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/publisher-detail/component.js should pass ESLint\\n\\n8:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('pods/home/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/home/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/products/index/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/products/index/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/products/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/products/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/products/show/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/products/show/controller.js should pass ESLint\\n\\n11:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('pods/products/show/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/products/show/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define('assessment-frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('assessment-frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'assessment-frontend/tests/helpers/start-app', 'assessment-frontend/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('assessment-frontend/tests/helpers/start-app', ['exports', 'assessment-frontend/app', 'assessment-frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('assessment-frontend/tests/integration/pods/components/data-grid/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('data-grid', 'Integration | Component | data grid', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kAmTgKF5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"data-grid\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8CgJfEco\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"data-grid\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('assessment-frontend/tests/integration/pods/components/header-navigation/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('header-navigation', 'Integration | Component | header navigation', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kinbLU54\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"header-navigation\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ygYje2Rw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"header-navigation\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('assessment-frontend/tests/integration/pods/components/info-button/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('info-button', 'Integration | Component | info button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jbWktZxB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"info-button\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ee99yqnX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"info-button\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('assessment-frontend/tests/integration/pods/components/publisher-detail/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('publisher-detail', 'Integration | Component | publisher detail', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"W03QDqan\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"publisher-detail\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"z/+k2alU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"publisher-detail\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('assessment-frontend/tests/test-helper', ['assessment-frontend/app', '@ember/test-helpers', 'ember-qunit'], function (_app, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create({ autoboot: false }));\n\n  (0, _emberQunit.start)();\n});","define('assessment-frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/pods/components/data-grid/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/data-grid/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/pods/components/header-navigation/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/header-navigation/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/pods/components/info-button/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/info-button/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/pods/components/publisher-detail/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/publisher-detail/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/pods/product/adapter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/product/adapter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/pods/product/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/product/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/pods/product/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/product/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/pods/products/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/products/route-test.js should pass ESLint\\n\\n');\n  });\n});","define('assessment-frontend/tests/unit/pods/product/adapter-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:product', 'Unit | Adapter | product', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('assessment-frontend/tests/unit/pods/product/model-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('product', 'Unit | Model | product', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('assessment-frontend/tests/unit/pods/product/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:product', 'Unit | Route | product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('assessment-frontend/tests/unit/pods/products/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:products', 'Unit | Route | products', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('assessment-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjfile":"tests.js"}